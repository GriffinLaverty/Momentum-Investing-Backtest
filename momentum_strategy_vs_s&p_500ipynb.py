# -*- coding: utf-8 -*-
"""Momentum Strategy vs S&P 500ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bygX5WOtleA_UK6lXcEGSLBmeFpiCgM9
"""

import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from pathlib import Path

global data;
closePricesFileName = "closePrices.pkl"
closePricesPath = Path("closePrices.pkl")
spyReturnsPath = Path("spy_cum.pkl")
startDate = "2021-01-01"
endDate = "2025-01-01"


url = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'
tables = pd.read_html(url)
sp500_df = tables[0]
sp500_tickers = sp500_df['Symbol'].str.replace('.', '-', regex=False).tolist()

def getDataIfNotDownloaded():
    if not closePricesPath.is_file():
        print("Downloading Close Prices from yahoo finance")
        # Download historical adjusted close prices
        data = yf.download(sp500_tickers, start="1993-01-01", end="2025-01-01", interval="1mo")
        data = data.dropna(axis=1)  # Drop stocks without complete data
        data = data['Close']
        data.to_pickle("closePrices.pkl")


    if not spyReturnsPath.is_file():
        # Benchmark (SPY)
        spy = yf.download("SPY", start="1993-01-01", end="2025-01-01", interval="1mo")
        spy = spy['Close']
        spy_returns = spy.pct_change().dropna()
        spy_returns.to_pickle("spyReturns.pkl")

    

# Set up momentum backtest
def momentum_strategy(prices, top_n=3, lookback=8, skip=0, startDate = startDate, endDate = endDate):
    portfolio_returns = []
    transactions = []

    prices = prices.loc[startDate:endDate]
    print(prices)

    for i in range(lookback + skip, len(prices) - 1):
        # Define window
        start = i - lookback - skip
        end = i - skip

        # Get momentum (past 12-month return, excluding most recent month)
        past_return = prices.iloc[end] / prices.iloc[start] - 1
        top_momentum = past_return.sort_values(ascending=False).head(top_n)

        rebalance_date = prices.index[i]
        transactions.append((rebalance_date.strftime('%Y-%m-%d'), list(top_momentum.index)))

        # Next month return of selected stocks
        next_month_return = prices.iloc[i + 1][top_momentum.index] / prices.iloc[i][top_momentum.index] - 1
        avg_return = next_month_return.mean()

        portfolio_returns.append(avg_return)

    return pd.Series(portfolio_returns, index=prices.index[lookback + skip + 1:]), transactions

# Run strategy
getDataIfNotDownloaded()
closePricesDataFrame = pd.read_pickle("closePrices.pkl")
spyReturns = pd.read_pickle("spyReturns.pkl")
spyReturns= spyReturns.loc[startDate:endDate]
spy_cum = (1 + spyReturns).cumprod()


momentum_returns, transactions = momentum_strategy(closePricesDataFrame)
print(os.getcwd())
momentum_cum = (1 + momentum_returns).cumprod()



# Align dates
momentum_cum = momentum_cum[spy_cum.index.intersection(momentum_cum.index)]
#spy_cum = spy_cum[spy_cum.index.intersection(momentum_cum.index)]

# Plot
plt.figure(figsize=(12, 6))
plt.plot(momentum_cum, label='Momentum Strategy (Top 3)')
plt.plot(spy_cum, label='SPY Benchmark')
plt.title('12-1 Momentum Strategy vs S&P 500')
plt.xlabel('Date')
plt.ylabel('Cumulative Return')
plt.legend()
plt.grid(True)
plt.show()